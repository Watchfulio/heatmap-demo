#!/usr/bin/env bash

fn-deploy-task() {
  declare APP_SHORT_ENV="$1" TASK_VERSION="$2"
  local image task

  if [[ -z "$APP_NAME" ]]; then
    echo "Missing APP_NAME environment variable"
    return 1
  fi

  task="$(cat ecs/task.json)"
  task="${task//APP_SHORT_ENV/$APP_SHORT_ENV}"
  task="$(echo "$task" | jq --arg APP_SHORT_ENV "$APP_SHORT_ENV" '.containerDefinitions[0].environment += [{
    "name": "APP_SHORT_ENV",
    "value": $APP_SHORT_ENV
  }]')"

  if [[ -n "$TASK_VERSION" ]]; then
    image="610410161133.dkr.ecr.us-west-1.amazonaws.com/app/$APP_NAME:$TASK_VERSION"
    task="$(echo "$task" | jq --arg image "$image" '.containerDefinitions[0].image = $image')"
  fi

  echo "$task" | xargs -0 aws ecs register-task-definition --cli-input-json --no-cli-pager
}

fn-deploy-service() {
  declare APP_SHORT_ENV="$1"
  local vpc_id subnet_ids group_id sd_arn service service_arn target_group_arn
  local exists=false

  if [[ -z "$APP_NAME" ]]; then
    echo "Missing APP_NAME environment variable"
    return 1
  fi

  if [[ -z "$AWS_VPC_NAME" ]]; then
    echo "Missing AWS_VPC_NAME environment variable"
    return 1
  fi

  service="$(cat ecs/service.json)"
  service="${service//APP_SHORT_ENV/$APP_SHORT_ENV}"

  vpc_id="$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=$AWS_VPC_NAME" --query "Vpcs[0].VpcId" --output text)"
  subnet_ids="$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc_id" --query "Subnets[*].SubnetId" --output json)"
  group_id="$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$vpc_id" "Name=group-name,Values=$APP_SHORT_ENV-$APP_NAME-ecs-task" --query "SecurityGroups[0].GroupId" --output text)"
  # shellcheck disable=SC2016
  service_arn="$(aws ecs describe-services --cluster "$APP_SHORT_ENV-$APP_NAME" --services "$APP_NAME" --query 'services[?status != `INACTIVE`].serviceArn' --output text)"
  sd_arn="$(aws servicediscovery list-namespaces --filters "Name=NAME,Values=$APP_SHORT_ENV-$APP_NAME-default,Condition=EQ" --query 'Namespaces[0].Arn' --output text)"
  target_group_arn="$(aws elbv2 describe-target-groups --names "$APP_SHORT_ENV-$APP_NAME-tg" --query "TargetGroups[0].TargetGroupArn" --output text 2>/dev/null)"

  if [[ -n "$service_arn" ]] && [[ "$service_arn" != "null" ]]; then
    exists=true
    service="$(echo "$service" | jq '.service = .serviceName')"
    service="$(echo "$service" | jq 'del(.launchType)')"
    service="$(echo "$service" | jq 'del(.serviceName)')"
    service="$(echo "$service" | jq 'del(.tags)')"
  fi

  if [[ -n "$sd_arn" ]] && [[ "$sd_arn" != "null" ]]; then
    service="$(echo "$service" | jq --arg sd_arn "$sd_arn" '.serviceConnectConfiguration.namespace = $sd_arn')"
  fi

  if [[ -n "$target_group_arn" ]]; then
    service="$(echo "$service" | jq --arg target_group_arn "$target_group_arn" '.loadBalancers[0].targetGroupArn = $target_group_arn')"
  fi

  service="$(echo "$service" | jq --argjson subnet_ids "$subnet_ids" '.networkConfiguration.awsvpcConfiguration.subnets = $subnet_ids')"
  service="$(echo "$service" | jq --arg group_id "$group_id" '.networkConfiguration.awsvpcConfiguration.securityGroups += [$group_id]')"

  if [[ "$exists" == "true" ]]; then
    echo "$service" | xargs -0 aws ecs update-service --service "$APP_NAME" --cli-input-json --no-cli-pager
  else
    echo "$service" | xargs -0 aws ecs create-service --cli-input-json --no-cli-pager
  fi
}

main() {
  declare APP_SHORT_ENV="$1" ECS_TYPE="$2" TASK_VERSION="$3"

  if [[ "$ECS_TYPE" == "task" ]]; then
    fn-deploy-task "$APP_SHORT_ENV" "$TASK_VERSION"
  elif [[ "$ECS_TYPE" == "service" ]]; then
    fn-deploy-service "$APP_SHORT_ENV"
  else
    fn-deploy-task "$APP_SHORT_ENV"
    fn-deploy-service "$APP_SHORT_ENV"
  fi

}

main "$@"
